#include <iostream>
#include <windows.h>

void print_opt32(const IMAGE_OPTIONAL_HEADER32 &head) {
    std::cout << "\nOPTIONAL HEADER32: " << std::endl;
    std::cout << "0x18: (uint16_t) Magic: 0x" << std::hex << head.Magic << std::endl;
    std::cout << "0x1A: (uinht8_t) MajorLinkerVersion: " << std::hex << static_cast<int>(head.MajorLinkerVersion) << std::endl;
    std::cout << "0x1B: (uint16_t) MinorLinkerVersion: " << std::hex << static_cast<int>(head.MinorLinkerVersion) << std::endl;
    std::cout << "0x1C: (uint32_t) SizeOfCode: 0x" << std::hex << head.SizeOfCode << std::endl;
    std::cout << "0x20: (uint32_t) SizeOfInitializedData: 0x" << std::hex << head.SizeOfInitializedData << std::endl;
    std::cout << "0x24: (uint32_t) SizeOfUninitializedData: 0x" << std::hex << head.SizeOfUninitializedData << std::endl;
    std::cout << "0x28: (uint32_t) AddressOfEntryPoint: 0x" << std::hex << head.AddressOfEntryPoint << std::endl;
    std::cout << "0x2C: (uint32_t) BaseOfCode: 0x" << std::hex << head.BaseOfCode << std::endl;
    std::cout << "0x34: (uint32_t) BaseOfData: 0x" << std::hex << head.BaseOfData << std::endl;
    std::cout << "0x38: (uint32_t) ImageBase: 0x" << std::hex << head.ImageBase << std::endl;
    std::cout << "0x3C: (uint32_t) SectionAlignment: 0x" << std::hex << head.SectionAlignment << std::endl;
    std::cout << "0x40: (uint32_t) FileAlignment: 0x" << std::hex << head.FileAlignment << std::endl;
    std::cout << "0x44: (uint16_t) MajorOperatingSystemVersion: " << std::hex << head.MajorOperatingSystemVersion << std::endl;
    std::cout << "0x46: (uint16_t) MinorOperatingSystemVersion: " << std::hex << head.MinorOperatingSystemVersion << std::endl;
    std::cout << "0x48: (uint16_t) MajorImageVersion: " << std::hex << head.MajorImageVersion << std::endl;
    std::cout << "0x4A: (uint16_t) MinorImageVersion: " << std::hex << head.MinorImageVersion << std::endl;
    std::cout << "0x4C: (uint16_t) MajorSubsystemVersion: " << std::hex << head.MajorSubsystemVersion << std::endl;
    std::cout << "0x4E: (uint16_t) MinorSubsystemVersion: " << std::hex << head.MinorSubsystemVersion << std::endl;
    std::cout << "0x50: (uint32_t) Win32VersionValue: 0x" << std::hex << head.Win32VersionValue << std::endl;
    std::cout << "0x54: (uint32_t) SizeOfImage: 0x" << std::hex << head.SizeOfImage << std::endl;
    std::cout << "0x58: (uint32_t) SizeOfHeaders: 0x" << std::hex << head.SizeOfHeaders << std::endl;
    std::cout << "0x5C: (uint32_t) CheckSum: 0x" << std::hex << head.CheckSum << std::endl;
    std::cout << "0x60: (uint16_t) Subsystem: " << std::hex << head.Subsystem << std::endl;
    std::cout << "0x62: (uint16_t) DllCharacteristics: " << std::hex << head.DllCharacteristics << std::endl;
    std::cout << "0x64: (uint32_t) SizeOfStackReserve: 0x" << std::hex << head.SizeOfStackReserve << std::endl;
    std::cout << "0x68: (uint32_t) SizeOfStackCommit: 0x" << std::hex << head.SizeOfStackCommit << std::endl;
    std::cout << "0x6C: (uint32_t) SizeOfHeapReserve: 0x" << std::hex << head.SizeOfHeapReserve << std::endl;
    std::cout << "0x70: (uint32_t) SizeOfHeapCommit: 0x" << std::hex << head.SizeOfHeapCommit << std::endl;
    std::cout << "0x74: (uint32_t) LoaderFlags: 0x" << std::hex << head.LoaderFlags << std::endl;
    std::cout << "0x78: (uint32_t) NumberOfRvaAndSizes: 0x" << std::hex << head.NumberOfRvaAndSizes << std::endl;
    std::cout << "0x7C: (uint32_t) ExportDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress << std::endl;
    std::cout << "0x80: (uint32_t) ExportDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size << std::endl;
    std::cout << "0x84: (uint32_t) ImportDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress << std::endl;
    std::cout << "0x88: (uint32_t) ImportDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size << std::endl;
    std::cout << "0x8C: (uint32_t) ResourceDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].VirtualAddress << std::endl;
    std::cout << "0x90: (uint32_t) ResourceDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].Size << std::endl;
    std::cout << "0x94: (uint32_t) ExceptionDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].VirtualAddress << std::endl;
    std::cout << "0x98: (uint32_t) ExceptionDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXCEPTION].Size << std::endl;
    std::cout << "0x9C: (uint32_t) SecurityDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY].VirtualAddress << std::endl;
    std::cout << "0xA0: (uint32_t) SecurityDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_SECURITY].Size << std::endl;
    std::cout << "0xA4: (uint32_t) BaseRelocationTable VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress << std::endl;
    std::cout << "0xA8: (uint32_t) BaseRelocationTable Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size << std::endl;
    std::cout << "0xAC: (uint32_t) DebugDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG].VirtualAddress << std::endl;
    std::cout << "0xB0: (uint32_t) DebugDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG].Size << std::endl;
    std::cout << "0xB4: (uint32_t) ArchitectureSpecificData VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_ARCHITECTURE].VirtualAddress << std::endl;
    std::cout << "0xB8: (uint32_t) ArchitectureSpecificData Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_ARCHITECTURE].Size << std::endl;
    std::cout << "0xBC: (uint32_t) RVAofGP VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR].VirtualAddress << std::endl;
    std::cout << "0xC0: (uint32_t) RVAofGP Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_GLOBALPTR].Size << std::endl;
    std::cout << "0xC4: (uint32_t) TLSDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS].VirtualAddress << std::endl;
    std::cout << "0xC8: (uint32_t) TLSDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_TLS].Size << std::endl;
    std::cout << "0xCC: (uint32_t) LoadConfigurationDirectory VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress << std::endl;
    std::cout << "0xD0: (uint32_t) LoadConfigurationDirectory Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].Size << std::endl;
    std::cout << "0xD4: (uint32_t) BoundImportDirectoryinheaders VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT].VirtualAddress << std::endl;
    std::cout << "0xD8: (uint32_t) BoundImportDirectoryinheaders Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT].Size << std::endl;
    std::cout << "0xDC: (uint32_t) ImportAddressTable VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IAT].VirtualAddress << std::endl;
    std::cout << "0xE0: (uint32_t) ImportAddressTable Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_IAT].Size << std::endl;
    std::cout << "0xE4: (uint32_t) DelayLoadImportDescriptors VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].VirtualAddress << std::endl;
    std::cout << "0xE8: (uint32_t) DelayLoadImportDescriptors Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].Size << std::endl;
    std::cout << "0xEC: (uint32_t) COMRuntimedescriptor VA: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR].VirtualAddress << std::endl;
    std::cout << "0xF0: (uint32_t) COMRuntimedescriptor Size: 0x" << std::hex << head.DataDirectory[IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR].Size << std::endl;
}